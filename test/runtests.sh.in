#!/bin/bash

# SPDX-License-Identifier: LGPL-2.1-or-later
#
# Copyright (C) 2011-2023 Red Hat, Inc.
#
# Author: Tony Asleson <tasleson@redhat.com>
#         Gris Ge <fge@redhat.com>
#
# Unit test case driver

export G_SLICE=always-malloc
export G_DEBUG=gc-friendly
export CK_DEFAULT_TIMEOUT=600
export CK_FORK=no

#Put us in a consistent spot
if [ ! -e "./test" ];then
    echo "We are running from test folder directly."
    cd ..
fi

test_base_dir="/tmp/$RANDOM"
build_dir=$(readlink -f "$(pwd)")
src_dir=$(readlink -f "@abs_top_srcdir@")
with_mem_leak_test="@WITH_MEM_LEAK_TEST@"
export INCLUDE_SMISPY="@WITH_SMISPY@"

source "${src_dir}"/test/test_include.sh

# Constant check: check whether python constants matched with C constants.
perl "${src_dir}"/tools/utility/check_const.pl || exit 1

echo "build_dir = ${build_dir}"
echo "src_dir = ${src_dir}"
echo "Starting in dir =  $(pwd)"


# Fetch and test the golang module to ensure we didn't break it
arch=$(uname -m)
if [ "CHK${arch}" != "CHKppc64" ] && [ "${src_dir}" == "${build_dir}" ] && [ "$EUID" -eq 0 ] ; then
    echo "Testing golang module"

    lsm_test_base_install \
        "$test_base_dir" "$build_dir" "$src_dir" "${LSM_TEST_INSTALL_ALL_PLUGINS}"

    lsm_test_lsmd_start "${LSM_TEST_WITHOUT_MEM_CHECK}"

    STARTING_POINT=$(pwd)
    _good cd "${src_dir}"/

    #fetch the module
    if [ ! -d libstoragemgmt-golang ]; then
        _good git clone https://github.com/libstorage/libstoragemgmt-golang
    fi
    _good  cd libstoragemgmt-golang
    _good test/docker_travis_test.sh "$src_dir"  # We would need to pass src_dir and build_dir for distcheck to work
    _good cd "$STARTING_POINT"

    lsm_test_cleanup
else
    if [ "$EUID" -ne 0 ] ; then
        echo "need to run as root for golang testing"
    fi
    echo "Skipping golang module test..."
fi

# Fetch and test the rust code to ensure we didn't break it
if [ "CHK${arch}" != "CHKppc64" ] && [ "${src_dir}" == "${build_dir}" ] && [ "$EUID" -eq 0 ] ; then
    echo "Testing rust-lang code base"
    lsm_test_base_install \
        "$test_base_dir" "$build_dir" "$src_dir" "${LSM_TEST_INSTALL_ALL_PLUGINS}"

    lsm_test_lsmd_start "${LSM_TEST_WITHOUT_MEM_CHECK}"

    STARTING_POINT=$(pwd)
    _good cd "${src_dir}"/

    # We need to setup directory where the shared library has been built as we are linking to it
    # in the rust-binding via FFI
    export RUSTFLAGS="-L$LD_LIBRARY_PATH"
    export RUSTDOCFLAGS=$RUSTFLAGS

    echo "RUSTFLAGS=$RUSTFLAGS"
    echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

    echo "Directory listing of .libs directory"
    _good ls -l $LD_LIBRARY_PATH

    #fetch the module
    if [ ! -d libstoragemgmt-rust ]; then
        _good git clone https://github.com/libstorage/libstoragemgmt-rust
    fi
    _good  cd libstoragemgmt-rust
    _good tests/ci_test.sh "$src_dir" # We would need to pass src_dir and build_dir for distcheck to work
    _good cd "$STARTING_POINT"

    lsm_test_cleanup
else
    if [ "$EUID" -ne 0 ] ; then
        echo "need to run as root for rust testing"
    fi
    echo "Skipping rust-lang test"
fi

echo "Round 1: Testing sim plugin"

lsm_test_base_install \
    "${test_base_dir}" "${build_dir}" "${src_dir}" "${LSM_TEST_INSTALL_PY_PLUGINS_ONLY}"

lsm_test_lsmd_start "${LSM_TEST_WITHOUT_MEM_CHECK}"

lsm_test_c_unit_test_run "${LSM_TEST_WITHOUT_MEM_CHECK}" "${LSM_TEST_SIM_URI}"
lsm_test_cmd_test_run "${LSM_TEST_SIM_URI}"
lsm_test_plugin_test_run "${LSM_TEST_SIM_URI}"

lsm_test_cleanup

echo "Round 2: Testing simc plugin and memory leak check if enabled"
lsm_test_base_install \
    "$test_base_dir" "$build_dir" "$src_dir" "${LSM_TEST_INSTALL_C_PLUGINS_ONLY}"

if [ "CHK${with_mem_leak_test}" == "CHKyes" ];then
    lsm_test_lsmd_start "${LSM_TEST_WITH_MEM_CHECK}"
    lsm_test_c_unit_test_run "${LSM_TEST_WITH_MEM_CHECK}" "${LSM_TEST_SIMC_URI}"
else
    lsm_test_lsmd_start "${LSM_TEST_WITHOUT_MEM_CHECK}"
    lsm_test_c_unit_test_run "${LSM_TEST_WITHOUT_MEM_CHECK}" "${LSM_TEST_SIMC_URI}"
fi

lsm_test_cmd_test_run "${LSM_TEST_SIMC_URI}"
lsm_test_plugin_test_run "${LSM_TEST_SIMC_URI}"

if [ "CHK$with_mem_leak_test" == "CHKyes" ];then
    lsm_test_check_memory_leak
fi
lsm_test_cleanup

# Sometimes we want to see the build output in the good case too
# so fake non-zero exit to cause a failure
if [[ -n "${FORCE_FAIL}" ]]; then
    echo "FORCE_FAIL= ${FORCE_FAIL}"
    exit 1
fi
