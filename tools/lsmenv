#!/usr/bin/perl -w
## Copyright (C) 2014-2023 Red Hat, Inc.
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# Author: Gris Ge <fge@redhat.com>

use strict;
use Config::IniFiles;
use File::Basename;
use Cwd 'abs_path';
use Fcntl ':mode';

$|++;

my $LSM_UDS_PATH = '/tmp/lsm/ipc/';
my $BASE_DIR = dirname( dirname( abs_path($0) ) );
my $LSM_URI_FILE = "$ENV{HOME}/.lsm_uri";
my $URI_CFG = Config::IniFiles->new( -file => $LSM_URI_FILE );
my $LSM_USER = 'libstoragemgmt';
my $LSM_GROUP = 'libstoragemgmt';

my $REF_PRE_BUILD_URI = {
    "sim"  => "sim://",
    "simc" => "simc://",
};

sub help() {
    my $help_str = <<END;

Usage:
    lsmenv is used for setting up envirionment variables for running lsmcli
    or lsmd in the develop code folder.
    It also read a config file: $LSM_URI_FILE to set up URI and password.

    The sample config file format is:

        [emc]   # dev_alias
        uri=smispy+ssl://admin\@emc-smi?no_ssl_verify=yes
        passwd=#1Password

    The sample command would be:
        lsmenv emc lsmcli list --type POOLS

    The URI for simulator plugins already prebuilded. Please use these command:
        lsmenv sim lsmcli
        lsmenv simc lsmcli

Commands:
    lsmenv lsmd
        # Run the lsmd
    lsmenv -l
        # List all device alias
    lsmenv <dev_alias> lsmcli ...
        # Run lsmcli command on certain device
    lsmenv all lsmcli ...
        # Run lsmcli command on all devices
    lsmenv <dev_alias> <any_command>
        # Run <any_command> with LSM envirionment variables.
END
    print $help_str;
    exit 1;
}

sub is_in_array($$) {
    my $ref_array = shift;
    my $item      = shift;
    return 1 if grep { $_ eq $item } @{$ref_array};
    return undef;
}

sub chk_lsm_user(){
    my $code_gid = (stat $BASE_DIR)[5];
    my $code_group_name = getgrgid($code_gid);
    my $lsm_gid = (getpwnam("libstoragemgmt"))[3];
    if ($lsm_gid and $lsm_gid != $code_gid){
        print "FAIL: Existing $LSM_USER account is not sharing gid of " .
              "curren code tree which might cause plugin permission problem" .
              "\n";
        print "      Please delete that user $LSM_USER " .
              "and rerun lsmenv as root user\n";
        exit 1;
    }
    unless($lsm_gid){
        # LSM_USER not exist.
        if ($> != 0){
            print "FAIL: Please run lsmenv as root user to create a proper " .
                  "$LSM_USER account\n";
            exit 1;
        }
        print "WARN: Creating libstoragemgmt account and add it into " .
              "the group '$code_group_name($code_gid)' of code tree owner. \n";

        system("useradd -r -g $code_gid -d / " .
               "-s /sbin/nologin " .
               "-c 'daemon account for libstoragemgmt' libstoragemgmt");
        # Check whether code tree $BASE_DIR is read and executable by LSM_USER
        # User are on their own if they changed file permission inside git
        # tree.
        my $cur_path = "$BASE_DIR/a";
        while(1){
            $cur_path = dirname($cur_path);
            print $cur_path, "\n";
            my $mod = (stat $cur_path)[2];
            unless(( $mod & S_IRGRP) and ( $mod & S_IXGRP )){
                print "WARN: Adding $cur_path with group read and " .
                      "excute permision\n";
                system("chmod g+rx $cur_path");
            }
            last if ($cur_path eq '/');
        }
    }
    return 1;
}

sub lsm_env_setup() {
    my $py_binding_dir = "$BASE_DIR/python_binding";
    my $c_binding_dir  = "$BASE_DIR/c_binding";
    unless ( ( -e $py_binding_dir ) && ( -e $c_binding_dir ) ) {
        print "FAIL: lsmenv is not from libstoragemgmt code tree.\n";
        exit 1;
    }
    my $py_lsm_dir = "$py_binding_dir/lsm";
    unless ( -l "$py_lsm_dir/plugin" ) {
        print "INFO: Creating softlink for plugin folder\n";
        system("ln -sv ../../plugin $py_lsm_dir");
    }
    unless ( -l "$py_lsm_dir/lsmcli" ) {
        print "INFO: Creating softlink for lsmcli folder\n";
        system("ln -sv ../../tools/lsmcli $py_lsm_dir");
    }
    # Link python C extension module.
    foreach (<$py_lsm_dir/.libs/*>) {
        next unless /\.so$/;
        my $c_lib_file = basename($_);
        system("ln -sfv '.libs/$c_lib_file' '$py_lsm_dir/$c_lib_file'")
          unless (-l "$py_lsm_dir/$c_lib_file");
    }

    unless ( -d "$LSM_UDS_PATH" ) {
        print "INFO: Creating socket folder $LSM_UDS_PATH\n";
        system("mkdir -pv $LSM_UDS_PATH");
        system("chown $LSM_USER $LSM_UDS_PATH");
    }

    $ENV{LSM_UDS_PATH} = $LSM_UDS_PATH;
    $ENV{PYTHONPATH}      .= ":$py_binding_dir";
    $ENV{LD_LIBRARY_PATH} .= ":$c_binding_dir";
    $ENV{LSM_SIM_TIME} = "0.1" unless defined $ENV{LSM_SIM_TIME};
}

sub set_uri($) {
    my $uri = shift;
    $ENV{LSMCLI_URI}   = $uri;
    $ENV{LSM_TEST_URI} = $uri;
}

sub set_pass($) {
    my $pass = shift;
    if ( defined $pass ) {
        $ENV{LSMCLI_PASSWORD}   = $pass;
        $ENV{LSM_TEST_PASSWORD} = $pass;
    }
    else {
        delete $ENV{LSMCLI_PASSWORD};
        delete $ENV{LSM_TEST_PASSWORD};
    }
}

sub call_out($) {

    # take section name as $1 and global $cfg
    # then run commands after(not include) ARGV[0]
    my $dev_alias = shift;

    if ( $#ARGV < 1 ) {
        print "Missing command to excute\n\n";
        help();
    }

    my $uri;
    my $pass = undef;
    if ( is_in_array( [ keys( %{$REF_PRE_BUILD_URI} ) ], $dev_alias ) ) {
        $uri = $REF_PRE_BUILD_URI->{$dev_alias};
    }
    else {
        $uri = $URI_CFG->val( $dev_alias, 'uri' );
        if ( $uri =~ /\n/m ) {
            print "Duplicate settings for \"$dev_alias\"\n";
            exit 1;
        }
        $pass = $URI_CFG->val( $dev_alias, 'passwd' )
          if $URI_CFG->val( $dev_alias, 'passwd' );
    }

    print "Device alias: $dev_alias\n";
    print "URI: $uri\n";
    set_uri($uri);
    set_pass($pass);

    my @cmd = @ARGV;
    shift @cmd;
    print "@cmd", "\n";
    if ( $cmd[0] eq "lsmcli" ) {
        $cmd[0] = "$BASE_DIR/tools/lsmcli/lsmcli";
    }
    elsif ( $cmd[0] eq 'plugin_test' ) {
        $cmd[0] = "$BASE_DIR/test/plugin_test.py";
    }
    system( "time", "-f", '\nTime: %E\n', @cmd );
    my $rc = $? >> 8;
    if ( $rc != 0 ) {
        print "Return code: $rc\n";
    }
}

sub start_lsmd($) {
    my $flag_valgrind = shift;
    if ($> != 0){
        print "FAIL: Please run lsmenv as root to start lsmd\n";
        exit 1;
    }
    my $lsmd_exec_file = "$BASE_DIR/daemon/lsmd";
    unless ( -f $lsmd_exec_file ) {
        print "FAIL: $lsmd_exec_file not exist, "
          . "please run 'make' in '$BASE_DIR' folder again\n";
        exit 1;
    }
    unless ( -x $lsmd_exec_file ) {
        print "FAIL: $lsmd_exec_file is not excutable, "
          . "please run 'make' in '$BASE_DIR' folder again\n";
        exit 1;
    }
    my $cmd = '';
    if ($flag_valgrind){
        $cmd .= "valgrind --trace-children=no ";
        $cmd .= "--leak-check=full --show-reachable=no ";
        $cmd .= '--log-file=/tmp/lsmd_leaking_%p ';
    }
    $cmd .= $lsmd_exec_file;
    my $plugin_dir = "$BASE_DIR/plugin";
    my $conf_dir = "$BASE_DIR/config";
    system( "$cmd --plugindir $plugin_dir "
          . "--socketdir $LSM_UDS_PATH -v -d --confdir $conf_dir" );
}

sub main() {
    if ( $#ARGV < 0 ) {
        help();
    }

    chk_lsm_user();
    lsm_env_setup();
    if ( $ARGV[0] eq 'lsmd' ) {
        start_lsmd(0);
        exit 0;
    }
    elsif ( $ARGV[0] eq 'lsmdv' ) {
        start_lsmd(1);
        exit 0;
    }
    elsif ( $ARGV[0] eq '-l' ) {
        map { print "$_\n"; } @{ $URI_CFG->{sects} };
        exit 0;
    }
    elsif ( $ARGV[0] eq 'all' ) {
        map { call_out($_) } keys( %{$REF_PRE_BUILD_URI} );
        map { call_out($_) } @{ $URI_CFG->{sects} };
        exit 0;
    }
    elsif ( $ARGV[0] =~ /^-h$|^--help$/ ) {
        help();
    }
    elsif (( is_in_array( [ keys( %{$REF_PRE_BUILD_URI} ) ], $ARGV[0] ) )
        || ( is_in_array( $URI_CFG->{sects}, $ARGV[0] ) ) )
    {
        call_out( $ARGV[0] );
        exit 0;
    }
    print "ERROR: Configuration for '$ARGV[0]' not found\n";
    help();
}

main();
